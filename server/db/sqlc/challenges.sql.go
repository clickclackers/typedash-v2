// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: challenges.sql

package db

import (
	"context"
)

const getChallengeByID = `-- name: GetChallengeByID :one
SELECT id, title, category, author, text, text_hash
FROM challenges
WHERE id = $1
`

func (q *Queries) GetChallengeByID(ctx context.Context, id int32) (Challenge, error) {
	row := q.db.QueryRow(ctx, getChallengeByID, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Category,
		&i.Author,
		&i.Text,
		&i.TextHash,
	)
	return i, err
}

const getChallengesByCategory = `-- name: GetChallengesByCategory :many
SELECT id, title, category, author, text, text_hash
FROM challenges
WHERE category = $1
`

func (q *Queries) GetChallengesByCategory(ctx context.Context, category string) ([]Challenge, error) {
	rows, err := q.db.Query(ctx, getChallengesByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Challenge
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Category,
			&i.Author,
			&i.Text,
			&i.TextHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

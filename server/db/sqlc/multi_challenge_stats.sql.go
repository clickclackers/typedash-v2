// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: multi_challenge_stats.sql

package db

import (
	"context"
)

const getMultiStatsByChallengeID = `-- name: GetMultiStatsByChallengeID :many
SELECT session_id, user_id, challenge_id, created_at, time_taken, wpm, accuracy, num_players, position
FROM multi_challenge_stats
WHERE challenge_id = $1
`

func (q *Queries) GetMultiStatsByChallengeID(ctx context.Context, challengeID int32) ([]MultiChallengeStat, error) {
	rows, err := q.db.Query(ctx, getMultiStatsByChallengeID, challengeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MultiChallengeStat
	for rows.Next() {
		var i MultiChallengeStat
		if err := rows.Scan(
			&i.SessionID,
			&i.UserID,
			&i.ChallengeID,
			&i.CreatedAt,
			&i.TimeTaken,
			&i.Wpm,
			&i.Accuracy,
			&i.NumPlayers,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMultiStatsByUserID = `-- name: GetMultiStatsByUserID :many
SELECT session_id, user_id, challenge_id, created_at, time_taken, wpm, accuracy, num_players, position
FROM multi_challenge_stats
WHERE user_id = $1
`

func (q *Queries) GetMultiStatsByUserID(ctx context.Context, userID int32) ([]MultiChallengeStat, error) {
	rows, err := q.db.Query(ctx, getMultiStatsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MultiChallengeStat
	for rows.Next() {
		var i MultiChallengeStat
		if err := rows.Scan(
			&i.SessionID,
			&i.UserID,
			&i.ChallengeID,
			&i.CreatedAt,
			&i.TimeTaken,
			&i.Wpm,
			&i.Accuracy,
			&i.NumPlayers,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMultiStatsByUserIDAndChallengeID = `-- name: GetMultiStatsByUserIDAndChallengeID :one
SELECT session_id, user_id, challenge_id, created_at, time_taken, wpm, accuracy, num_players, position
FROM multi_challenge_stats
WHERE user_id = $1
  AND challenge_id = $2
`

type GetMultiStatsByUserIDAndChallengeIDParams struct {
	UserID      int32 `json:"user_id"`
	ChallengeID int32 `json:"challenge_id"`
}

func (q *Queries) GetMultiStatsByUserIDAndChallengeID(ctx context.Context, arg GetMultiStatsByUserIDAndChallengeIDParams) (MultiChallengeStat, error) {
	row := q.db.QueryRow(ctx, getMultiStatsByUserIDAndChallengeID, arg.UserID, arg.ChallengeID)
	var i MultiChallengeStat
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.ChallengeID,
		&i.CreatedAt,
		&i.TimeTaken,
		&i.Wpm,
		&i.Accuracy,
		&i.NumPlayers,
		&i.Position,
	)
	return i, err
}
